"""
Module: ai_shellcode_mutation.py

Description:
Generates shellcode mutations using the OpenAI API. Given an existing
shellcode fragment, this module requests an AI model to produce new
byte sequences that can be used by KernelHunter for fuzzing.

Expected Impact:
AI-driven variations may expose previously unseen kernel weaknesses by
exploring instruction combinations beyond simple random mutation.

Risk Level:
Variable depending on the generated bytes.
"""

import os
import requests
import re

try:
    from kernelhunter_config import get_api_key
except Exception:
    def get_api_key():
        return ""

API_KEY = os.getenv("OPENAI_API_KEY") or get_api_key()
API_ENDPOINT = "https://api.openai.com/v1/chat/completions"


def generate_ai_shellcode_fragment(base_shellcode=b"", max_bytes=32):
    """Generate a new shellcode fragment using the OpenAI API.

    Args:
        base_shellcode (bytes): Existing shellcode to mutate.
        max_bytes (int): Maximum number of bytes to return.

    Returns:
        bytes: New shellcode fragment or empty bytes on failure.
    """
    if not API_KEY:
        # API key missing; return empty fragment
        return b""

    system_prompt = (
        "Eres un asistente experto en creaci\u00f3n de shellcodes x86_64 "
        "para fuzzing. Devuelve \u00fanicamente una cadena de bytes en formato "
        "hexadecimal sin espacios ni prefijos (por ejemplo, '90c3')."
    )
    user_prompt = (
        f"Mut\u00e1 el siguiente shellcode y genera hasta {max_bytes} bytes "
        f"adicionales en formato hexadecimal:\n{base_shellcode.hex()}"
    )

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt},
    ]

    try:
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {API_KEY}",
        }
        payload = {
            "model": "gpt-4o",
            "messages": messages,
            "temperature": 0.8,
            "max_tokens": 200,
        }
        response = requests.post(API_ENDPOINT, headers=headers, json=payload)
        data = response.json()
        if response.status_code != 200:
            return b""
        text = data.get("choices", [{}])[0].get("message", {}).get("content", "")
    except Exception:
        return b""

    hex_bytes = re.findall(r"[0-9a-fA-F]{2}", text)
    if not hex_bytes:
        return b""

    hex_str = "".join(hex_bytes)[: max_bytes * 2]
    try:
        return bytes.fromhex(hex_str)
    except ValueError:
        return b""


if __name__ == "__main__":
    base = b"\x90\x90\xcc"
    fragment = generate_ai_shellcode_fragment(base)
    print(f"Generated AI fragment: {fragment.hex()}")
